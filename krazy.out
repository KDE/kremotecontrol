
krazy2 Analysis

Checkers Run = 40
Files Processed = 45
Total Issues = 107 ...as of Dezember 06 2008 19:04:53 CET

==>For File Type c++<==
1. Check for TRUE and FALSE macros...  okay!

2. Check for methods that return 'const' refs in public classes...  okay!

3. Check for an acceptable copyright...  OOPS! 24 issues found!
	./kdelirc/iraction.h: missing tags: email address(line 10)  (1)
	./kdelirc/remoteserver.cpp: missing tags: email address(line 10)  (1)
	./kdelirc/arguments.cpp: missing tags: email address(line 10)  (1)
	./kdelirc/mode.cpp: missing tags: email address(line 10)  (1)
	./kdelirc/profileserver.h: missing tags: email address(line 10)  (1)
	./kdelirc/modes.cpp: missing tags: email address(line 10)  (1)
	./kdelirc/remoteserver.h: missing tags: email address(line 10)  (1)
	./kdelirc/iractions.h: missing tags: email address(line 10)  (1)
	./kdelirc/iractions.cpp: missing tags: email address(line 10)  (1)
	./kdelirc/iraction.cpp: missing tags: email address(line 10)  (1)
	./kdelirc/arguments.h: missing tags: email address(line 10)  (1)
	./kdelirc/mode.h: missing tags: email address(line 10)  (1)
	./kdelirc/profileserver.cpp: missing tags: email address(line 10)  (1)
	./kdelirc/prototype.h: missing tags: email address(line 10)  (1)
	./kdelirc/prototype.cpp: missing tags: email address(line 10)  (1)
	./kdelirc/modes.h: missing tags: email address(line 10)  (1)
	./kcmlirc/modeslist.cpp: missing tags: email address(line 10)  (1)
	./kcmlirc/editaction.h: missing tags: email address(line 10)  (1)
	./kcmlirc/editmode.h: missing tags: email address(line 10)  (1)
	./kcmlirc/modeslist.h: missing tags: email address(line 10)  (1)
	./kcmlirc/editaction.cpp: missing tags: email address(line 10)  (1)
	./kcmlirc/editmode.cpp: missing tags: email address(line 10)  (1)
	./irkick/klircclient.h: missing tags: email address(line 10)  (1)
	./irkick/klircclient.cpp: missing tags: email address(line 11)  (1)
	All source files must contain a copyright header which identifies
	the copyright holder(s) together with a e-mail address that can be
	used to reach the copyright holder.  One copyright holder per line,
	with real email addresses please. For details regarding KDE's
	licensing policy please visit
	<http://techbase.kde.org/Policies/Licensing_Policy>.  A typical
	copyright looks like: "Copyright 2002,2005-2006 Joe Hacker
	<joe.hacker@kde.org>"

4. Check for cpp macros and usage...  okay!

5. Check single-char QString operations for efficiency...  okay!

6. Check for unwanted doxygen tags in major versions...  okay!

7. Check public classes with private members or d-pointer issues...  okay!

8. Check for QString compares to ""...  okay!

9. Check that file ends with a newline...  okay!

10. Check for C++ ctors that should be declared 'explicit'...  okay!

11. Check for foreach loop issues...  okay!

12. Check validity of i18n calls...  OOPS! 5 issues found!
	./kcmlirc/addaction.cpp: single adjective as message, probably ambiguous; use context call to explain what it refers to line#445
	./kcmlirc/addaction.cpp: malformed markup (unmatched tags, etc.) line#445
	./kcmlirc/kcmlircbase.ui.h: reported ambiguous message by translators; use context call to explain what it refers to line#32
	./irkick/irkick.cpp: wrong argument count, have 0 need 1 line#423
	./irkick/irkick.cpp: reported ambiguous message by translators; use context call to explain what it refers to line#423
	Make the translators' job easier and detect problems in the usage
	of the i18n() calls. When the fix is not clear, check the Techbase
	article at
	<http://techbase.kde.org/Development/Tutorials/Localization/i18n_Kr
	azy> for more information.

13. Check for invalid icon names...  okay!

14. Check for proper include directives...  OOPS! 19 issues found!
	./kdelirc/remoteserver.cpp: include own header first line#21
	./kdelirc/mode.cpp: include own header first line#18
	./kdelirc/modes.cpp: include own header first line#17
	./kdelirc/iractions.cpp: include own header first line#17
	./kdelirc/iraction.cpp: include own header first line#20
	./kdelirc/profileserver.cpp: include own header first line#21
	./kdelirc/prototype.cpp: include own header first line#15
	./kcmlirc/addaction.cpp: include own header first line#30
	./kcmlirc/kcmlirc.h: using leading or trailing underscores on include guard in header
	./kcmlirc/modeslist.cpp: include own header first line#19
	./kcmlirc/editaction.cpp: include own header first line#37
	./kcmlirc/kcmlircbase.ui.h: missing or improper include guard in header
	./kcmlirc/editmode.cpp: include own header first line#17
	./kcmlirc/kcmlirc.cpp: duplicate includes line#35,46(kpushbutton.h);47,885(ktoolinvocation.h)
	./kcmlirc/kcmlirc.cpp: include own header first line#15
	./irkick/irkick.h: using leading or trailing underscores on include guard in header
	./irkick/klircclient.cpp: include own header first line#41
	./irkick/irkick.cpp: include own header first line#41
	Use <..> to include installed headers; <QtModule/QClass> to include
	Qt headers from installed headers; cpp file should include their
	own headers first (but below config.h); other rules apply, see
	<http://techbase.kde.org/Policies/Library_Code_Policy#Getting_.23in
	cludes_right>. Use include guards in headers with appropriatedly
	encoded macro names.

15. Check for inline methods in public classes...  okay!

16. Check for an acceptable license...  OOPS! 27 issues found!
	./kdelirc/iraction.h: missing license
	./kdelirc/remoteserver.cpp: missing license
	./kdelirc/arguments.cpp: missing license
	./kdelirc/mode.cpp: missing license
	./kdelirc/profileserver.h: missing license
	./kdelirc/modes.cpp: missing license
	./kdelirc/remoteserver.h: missing license
	./kdelirc/iractions.h: missing license
	./kdelirc/iractions.cpp: missing license
	./kdelirc/iraction.cpp: missing license
	./kdelirc/arguments.h: missing license
	./kdelirc/mode.h: missing license
	./kdelirc/profileserver.cpp: missing license
	./kdelirc/prototype.h: missing license
	./kdelirc/prototype.cpp: missing license
	./kdelirc/modes.h: missing license
	./kcmlirc/modeslist.cpp: missing license
	./kcmlirc/editaction.h: missing license
	./kcmlirc/editmode.h: missing license
	./kcmlirc/modeslist.h: missing license
	./kcmlirc/editaction.cpp: missing license
	./kcmlirc/editmode.cpp: missing license
	./irkick/klircclient.h: missing license
	./irkick/irkick.h: missing license
	./irkick/main.cpp: missing license
	./irkick/klircclient.cpp: missing license
	./irkick/irkick.cpp: missing license
	Each source file must contain a license or a reference to a license
	which states under which terms the software may be used, modified
	and redistributed.  For details regarding KDE's licensing policy
	please visit <http://techbase.kde.org/Policies/Licensing_Policy>.

17. Check for assignments to QString::null...  OOPS! 4 issues found!
	./kdelirc/iraction.h: line#87 (1)
	./kdelirc/mode.cpp: line#42 (1)
	./irkick/irkick.cpp: line#394,460 (2)
	Do not assign QString::null or QString() to a QString.	Instead use
	the .clear() method.  For example, "str = QString::null" becomes
	"str.clear()". When returning an empty string from a method use
	"return QString()"  When passing an empty string use "QString()".

18. Check for compares to QString::null or QString()...  OOPS! 3 issues found!
	./kdelirc/profileserver.h: line#114 (1)
	./kdelirc/modes.cpp: line#63,96 (2)
	Do not compare a QString to QString::null or QString().  Instead
	use the .isEmpty() method.  For example, if(str == QString::null)
	becomes if(str.isEmpty())

19. Check for inappropriate pass-by-value function args...  okay!

20. Check for postfix usage of ++ and --...  OOPS! 2 issues found!
	./kdelirc/profileserver.cpp: line#57 (1)
	./kcmlirc/editaction.cpp: line#333 (1)
	You should use ++ and -- as prefix whenever possible as these are
	more efficient than postfix operators. Prefix increments first and
	then uses the variable, postfix uses the actual; the variable is
	incremented as well. Because of this, the prefix operators are
	inherently more efficient. *WARNING* Make sure that you don't
	introduce off-by-one errors when changing i++ to ++i.

21. Check for dangerous or inefficient QByteArray usage...  okay!

22. Check for Qt classes that should not be used...  OOPS! 4 issues found!
	./kcmlirc/editaction.h: QDialog[KDialog] (1)
	./kcmlirc/editmode.h: QDialog[KDialog] (1)
	./kcmlirc/newmodedialog.h: QDialog[KDialog] (1)
	./kcmlirc/kcmlirc.cpp: QDialog[KDialog] (1)
	Don't use Qt 4 classes that are deprecated. Additionally make sure
	to use the KDE version of some Qt GUI elements to provide a
	consistent look and feel for the KDE desktop. The KDE classes are
	not just adding functionalities to the Qt base class and are mostly
	not even based on the Qt class.
	<http://techbase.kde.org/Policies/API_to_Avoid> *Please* *refer*
	*to* *the* *API* *documentation* *for* *details* *before* *porting*
	*to* *the* *K* *classes*.

23. Check for invalid SIGNALs and SLOTs passed to connect()...  okay!

24. Check for Qt methods that should be avoided...  okay!

25. Check for QMIN and QMAX macros...  okay!

26. Check for classes that should use the 'Q_OBJECT' macro...  okay!

27. Check for signals: and slots:...  okay!

28. Check for spelling errors...  okay!

29. Check for system calls to replace by KDE or Qt equivalents...  okay!

30. Check for typedefs that should be replaced by Qt typedefs...  okay!

==>For File Type messages<==
1. Check for appending to rc.cpp...  okay!

==>For File Type designer<==
1. Check that file ends with a newline...  okay!

2. Check for files that need to be fixed by 'fixuifiles'...  okay!

3. Check validity of i18n calls...  OOPS! 4 issues found!
	./kcmlirc/kcmlircbase.ui: reported ambiguous message by translators; use context call to explain what it refers to line#321,339
	./kcmlirc/kcmlircbase.ui: single adjective as message, probably ambiguous; use context call to explain what it refers to line#92
	./kcmlirc/newmode.ui: reported ambiguous message by translators; use context call to explain what it refers to line#51
	Make the translators' job easier and detect problems in the usage
	of the i18n() calls. When the fix is not clear, check the Techbase
	article at
	<http://techbase.kde.org/Development/Tutorials/Localization/i18n_Kr
	azy> for more information.

4. Check for Qt classes that should not be used...  OOPS! 15 issues found!
	./kcmlirc/kcmlircbase.ui: QTabWidget[KTabWidget] (1)
	./kcmlirc/editactionbase.ui: QDialog[KDialog],QTabWidget[KTabWidget],QComboBox[KComboBox],QComboBox[KComboBox],QComboBox[KComboBox],QComboBox[KComboBox],QComboBox[KComboBox],QComboBox[KComboBox],QComboBox[KComboBox] (9)
	./kcmlirc/selectprofile.ui: QDialog[KDialog] (1)
	./kcmlirc/editmodebase.ui: QDialog[KDialog],QLineEdit[KLineEdit] (2)
	./kcmlirc/newmode.ui: QDialog[KDialog],QLineEdit[KLineEdit] (2)
	Don't use Qt 4 classes that are deprecated. Additionally make sure
	to use the KDE version of some Qt GUI elements to provide a
	consistent look and feel for the KDE desktop. The KDE classes are
	not just adding functionalities to the Qt base class and are mostly
	not even based on the Qt class.
	<http://techbase.kde.org/Policies/API_to_Avoid> *Please* *refer*
	*to* *the* *API* *documentation* *for* *details* *before* *porting*
	*to* *the* *K* *classes*.

5. Check for spelling errors...  okay!

==>For File Type desktop<==
1. Check that file ends with a newline...  okay!

2. Check for invalid icon names...  okay!

3. Check for spelling errors...  okay!

4. Validates desktop files using 'desktop-file-validate'...  okay!

